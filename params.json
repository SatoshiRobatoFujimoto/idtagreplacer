{"name":"idtagreplacer ──  InDesign tag replacer","tagline":"","body":"# これはなに？\r\n\r\nidtagreplacerは、テキストに埋め込んだ編集記号をInDesignタグに変換するためのプログラムです。\r\n\r\n```\r\n■概要\r\n■■これはなに？\r\nテキストに埋め込んだ編集記号をInDesignタグに変換するためのプログラムです。\r\n```\r\n\r\nたとえば上記のテキストは編集記号として、\r\n\r\n* ■は「大見出し」\r\n* ■■は「中見出し」\r\n* 何も指定していない行は「本文」\r\n\r\nという意味をそれぞれ想定しているとします。\r\n\r\n通常、こうした原稿ファイルをDTPに出す場合、DTPオペレータに編集記号の意味を伝える必要があります。そしてオペレータは渡された原稿から編集記号を見付け、対応したスタイルを手作業で適用していきます。\r\n\r\nしかしこうした作業は機械的な単純作業であり、わざわざ人が行う価値のあるものとは言えません。人はミスもしますし。\r\n\r\nidtagreplacerを使えば、編集記号とInDesignスタイルの対応を設定しておくだけで、スタイルの適用されたInDesignタグ付きテキストを生成でき、DTPで発生する単純作業を軽減できます。編集記号やInDesignスタイルの名前は設定ファイルで任意に定義できます。\r\n\r\n# 実行方法\r\n\r\n## どうやってインストールするの？\r\n\r\nidtagreplacerはJavaのプログラムですから、[Javaの実行環境](http://java.com/ja/download/)が必要です。Java7以降をご使用ください。\r\n\r\nJava実行環境が整ったら、idtagreplacerを利用したいPCにダウンロードします。必要なのは次の2つです。\r\n\r\n* idtagreplacer.jar（プログラム本体）\r\n* tagconf.xml（編集記号、InDesignスタイルの定義ファイル）\r\n\r\n## どうやってアンインストールするの？\r\n\r\nインストールしたファイル一式を削除してください。\r\n\r\n## どうやって実行するの？\r\n\r\n1. あらかじめ自分用にtagconf.xmlを編集しておきます。\r\n2. idtagreplacer.jarをダブルクリックします。するとダイアログが表示されます。また、ログファイルを保存するためのlogフォルダがなければ自動で作成されます。\r\n3. 処理したい原稿ファイルを、ダイアログにドラッグ&ドロップします。\r\n4. すると、原稿ファイルと同じ場所に、処理結果のファイルが作成されます。\r\n\r\n作成されたテキストをInDesignに読み込んでください。\r\n流し込みたいInDesignのフォームには、あらかじめスタイルが設定されていなければなりません。\r\n\r\n# 試してみましょう\r\n\r\nidtagprelacerを使った一連の作業を、実際に手を動かしながらなぞってみましょう。\r\n\r\n## サンプルファイルの準備と内容確認\r\n\r\nまずInDesignのフォームを用意します。idtagreplacerを使う場合、流し込み先となるInDesignのフォームに、あらかじめスタイルが設定されている必要があります。\r\n\r\nそのフォームにどんなスタイルが設定されてあるかを確認するには、まずInDesignでファイルを開きます。コマンド + F11を押すと段落スタイルのウィンドウが現れ、設定済みの段落スタイルを確認できます。コマンド + Shift + F11を押すと文字スタイルのウィンドウが現れ、設定済みの文字スタイルを確認できます。\r\n\r\n次に、インストールしたidtagreplacerのフォルダにあるtagconf.xmlの内容を確認しましょう。このファイルには、あらかじめサンプルとなる設定情報が入力されています。テキストエディタで開いてみましょう。\r\n\r\nこのファイルの中心部は次の2ヵ所です。\r\n\r\n```\r\n<entry key=\"段落タグ設定\"><![CDATA[\r\n...\r\n]]></entry>\r\n```\r\n\r\n```\r\n<entry key=\"文字タグ設定\"><![CDATA[\r\n...\r\n]]></entry>\r\n```\r\n\r\nそれぞれの設定内容を見ると、各行に必ず1つ「:」があります。\r\n\r\n```\r\n■ : 大見出し\r\n```\r\n\r\n「:」の右側に書かれているのがInDesignのスタイル名です。これは、先ほどのInDesignのフォームに設定されているスタイル名と対応しています。\r\n\r\n一方「:」の左側に書かれているのが編集記号の設定情報です。つまりこの設定情報は、左側に書かれた編集記号が、右側に書かれたスタイル名に対応するというしくみになっています。\r\n\r\n以上で、あらかじめ用意しておくべきファイルの確認は終わりです。\r\n\r\n## 原稿ファイルの作成\r\n\r\n原稿ファイルを作成します。サンプルのtagconf.xmlで設定されているタグをそのまま使って、次のような内容のファイルを作成することにしましょう。\r\n\r\n```\r\n■はじめに\r\n◆b/◆idtagreplacer◆/b◆とInDesignタグの世界へようこそ！\r\n```\r\n\r\nファイルは（サンプルのtagconf.xmlの設定に従って）Shift-JISで保存します。ファイル名は、source.txtとしておきましょう。\r\n\r\n## InDesignタグ付きテキストへの変換\r\n\r\n作成した原稿ファイルをInDesignタグ付きテキストに変換します。手順は次のとおりです。\r\n\r\n1. idtagreplacerを起動します\r\n * idtagreplacer.jarをダブルクリックしてください。ダイアログが表示されます。\r\n2. 原稿ファイルをドラッグします\r\n * 表示されたダイアログの下部に「編集記号付きテキストファイルをドラッグしてください。」というメッセージが表示されたら、先ほど作成した原稿ファイル（source.txt）をこのダイアログにドラッグ&ドロップしてください。\r\n\r\n原稿ファイルのあるフォルダに、InDesignタグ付きテキストに変換されたファイルが作成されるはずです。ファイル名は（サンプルのtagconf.xmlの設定に従って）source_id.txtとなっているはずです。\r\n\r\n## InDesignフォームへの配置\r\n\r\nInDesignのマスターフォームを開き、作成したタグ付きテキストを配置します。手順は次のとおりです。\r\n\r\n1. マスターフォームを開きます\r\n * マスターフォームのファイルをダブルクリックして開いてください。\r\n2. 「横組みグリッドツール」を選択します\r\n * InDesignのツールボックス（デフォルトで左端に表示されるフローティングバー）にある「横組みグリッドツール」ボタンをクリックします。\r\n * 「横組みグリッドツール」ボタンの場所が分からない場合は、（IMを英字入力に切り替えて）キーボードの「y」をタイプします。これで「横組みグリッドツール」ボタンをクリックしたのと同じことになります。\r\n * 「横組みグリッドツール」を選択すると、マウスカーソルが細い十字のようなかたちに変わります。\r\n3. グリッドフレームを作成します\r\n * マスターフォームに設定されているガイドに沿って、まず段組みの左段をドラッグします。左段の左上から右下へとマウスをドラッグすると、升目のついたフレームが作成されます。これがグリッドフレームです。\r\n4. タグ付きテキストを配置します\r\n * 先の手順で作成したグリッドフレームが選択されている状態（白い小さな□が付いている状態）で、メニューの「ファイル」→「配置...」を選択します。「配置」ダイアログが表示されますので、先ほど作成したタグ付きテキストを選択します。ダイアログ下部にある「グリッドフォーマットの適用」にチェックがついている場合はそれを外し、「開く」ボタンをクリックします。\r\n * 「配置」ダイアログは、Command+Dでも表示できます。なお、グリッドフレームの選択が外れてしまった場合は、ツールボックスから「選択ツール」ボタン（黒い矢印）をクリックして、グリッドフレームをクリックし選択し直します。\r\n5. （テキストの続きを配置します）\r\n * 今回のサンプルテキストは短いので、上の手順までですべての読み込みが完了しますが、長いテキストの場合、左段だけではテキストが溢れてしまいます。溢れたテキストがある場合、グリッドフレームの右下に赤い四角が現れます。\r\n * 溢れたテキストを配置するには、ツールボックスから「選択ツール」ボタン（黒い矢印のボタン）をクリックし、グリッドフレームの右下の赤い四角をクリックします。するとマウスカーソルにテキストの一部が表示されるようになります。\r\n * この状態で、マウスカーソルを右段の左上に持っていき、Shift+クリックします。すると、続きのテキストが自動的にすべて配置されます。\r\n\r\n以上の手順で、グリッドにテキストが配置されたはずです。配置されたテキストには、すでにスタイルが適用されていることを確認してください。\r\n\r\n# tagconf.xmlの書き方\r\n\r\n## tagconf.xmlの構造\r\ntagconf.xmlは、とても単純なXMLファイルです。\r\n構造としてはJavaのプロパティファイルの書式で書かれています。つまり、次のような構造です。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"Shift_JIS\"?>\r\n<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\r\n<properties>\r\n<entry key=\"key1\">value1</entry>\r\n<entry key=\"key2\">value2</entry>\r\n...\r\n</properties>\r\n```\r\n\r\nentry要素のkey属性で指定された値がプロパティ名になります。そして、entry要素の値が、そのプロパティ名に対応する値となります。……要するに、上記の例で言えば、key1、key2がプロパティ名です。プロパティkey1の値がvalue1、key2の値がvalue2ということになります。\r\n\r\n以下、プロパティ名ごとに、tagconf.xmlの設定内容を説明していきます。既存のtagconf.xmlを見ながら読んでいただくとよいでしょう。\r\n\r\n## エンコード\r\n\r\n原稿ファイルの文字コードを指定します。Shift_JISもしくはUTF-8のいずれかを指定できます。\r\n\r\n## 改行コード\r\n\r\n出力ファイルの改行コードを指定します（原稿ファイルの改行コードは問いません）。InDesignに読み込ませる場合は、この値をCRと指定しておきます。\r\n\r\nCRLFやLFと指定してもその通りに出力しますが、InDesign\r\nはそのファイルを正しく読み込めないかもしれません。出力ファイルを目視で確認したい場合などの例外を除いて、基本的にCRのままにしておきます。\r\n\r\n## 保存ファイル名\r\n\r\n出力ファイルの名前です。出力ファイルは原稿ファイルと同じディレクトリに作成され、自動的に命名されます。このときの命名ルールをカスタマイズするときに、この設定値を変更します。\r\n\r\n設定値の%sには原稿ファイルのファイル名（拡張子を除く）が入ります。\r\n\r\n```\r\n例：\r\n原稿ファイル：foobar.txt\r\n設定値：%s_id.txt\r\n↓\r\n出力ファイル名は「foobar_id.txt」\r\n```\r\n\r\n## 段落タグの既定値\r\n\r\nデフォルトの段落スタイルを指定します。デフォルトの段落スタイルとは、無指定の段落を指します。\r\n\r\n## 段落タグ設定\r\n\r\n段落タグの設定を列挙します。段落タグとは、段落スタイルに変換される編集記号のことです。\r\n\r\nidtagreplacerでは、次の2種類の段落タグが利用できます。\r\n\r\n### 一行段落タグ\r\n\r\n行頭に置かれる編集記号で、その行のみにスタイルが適用されます。たとえば、原稿ファイルで下記のように使うタイプの編集記号です。\r\n\r\n```\r\n原稿ファイルでの使用例：\r\n■はじめに\r\n```\r\n\r\n記号「■」にたとえば「大見出し」のスタイルを対応させている場合、これは「はじめに」という大見出しを表現していることになります。一行段落タグは、このように行頭にあって、その行を修飾するタイプの編集記号です。\r\n\r\n### 開始／終了段落タグ\r\n\r\n開始を表す編集記号と、終了を表す編集記号の1組がセットになった編集記号です。\r\n\r\n開始から終了までのすべての行にスタイルが適用されます。\r\n\r\n```\r\n原稿ファイルでの使用例：\r\n◆list/◆\r\nint main(int argc, char** argv)\r\n\r\n{\r\n\r\n    puts(\"Hello\");\r\n\r\n    return 0;\r\n\r\n}\r\n◆/list◆\r\n```\r\n\r\nこの例では、開始記号「◆list/◆」と終了記号「◆/list◆」を持つ段落タグが使われています。開始記号から終了記号までの間は、この段落タグに対応したスタイルが適用されることになります。\r\n\r\nなお、開始記号や終了記号だけが書かれた行は、変換に際して削除されます★現状、開始記号は削除されない★。\r\n\r\n段落スタイルで挟むタグを利用する場合は、1行以上にする必要があります。\r\n\r\n```\r\n×正常に変換できない\r\n◆list/◆aa◆/list◆\r\n```\r\n\r\n### 設定ファイルに記述する書式\r\n\r\n段落タグの設定は行単位で解釈されます。書式は次の通りです。\r\n\r\n```\r\n一行段落タグの記号 : スタイル名\r\n```\r\n\r\n```\r\n開始記号 終了記号 : スタイル名\r\n```\r\n\r\n開始記号と終了記号の間の空白文字（スペースやタブ）は、いくつあってもかまいません。\r\n\r\n記号やスタイル名と「:」の間にある空白は、あってもなくてもかまいません。また空白を入れた場合、いくつ入っていてもかまいません。\r\n\r\n### オプション\r\n\r\n原則的に編集記号は、idtagreplacerが変換処理を行う際に削除されます。編集記号を削除したくない場合は、スタイル名の先頭に「!」を付けます。\r\n\r\nまた、スタイル名の先頭に「!!」を付けると、スタイル名と同じプロパティ名に記述されたJavaScriptを実行させることができます。\r\n\r\n### 注意点\r\n#### 段落タグの記述順序\r\n\r\nプログラムは原稿ファイルを1行読み込むと、該当する段落タグがあるかどうかをチェックします。このときプログラムは、必ず設定ファイルに記述された順序に従って段落タグをチェックしていきます。該当する段落タグが見つかったら、それ以降はチェックせずに、原稿ファイルの次の行を読み込みます。\r\n\r\n段落タグの記述順序はしばしば重要な意味を持ちます。たとえば「■」という段落タグと「■■」という段落タグを使いたい場合があったとします。このとき、\r\n\r\n```\r\n■   : 大見出し\r\n■■ : 中見出し\r\n```\r\n\r\nなどのように書いてしまうと、後者の「中見出し」のスタイルは、一切適用されなくなってしまいます。これは、最初の「■」を見つけた段階でプログラムは「大見出し」と判定してしまい、「■■」をチェックしなくなってしまうからです。こうした場合、次のように順序を逆にして記述します。\r\n\r\n```\r\n■■ : 中見出し\r\n■   : 大見出し\r\n```\r\n\r\n#### 段落の入れ子と終了記号\r\n\r\nidtagreplacerでは、段落スタイルは入れ子にして使えるようになっています。\r\n\r\nたとえば次のような設定があるとします。\r\n\r\n```\r\n設定ファイルでの設定例：\r\n■■■■■ : コラム小見出し\r\n■■■■   : コラムタイトル\r\n◆column/◆ ◆/column◆ : コラム本文\r\n```\r\n\r\nこの場合、原稿ファイルで次のように記述することもできます。\r\n\r\n```\r\n原稿ファイルでの使用例：\r\n◆column/◆\r\n■■■■コラムタイトル\r\n■■■■■コラム小見出し1\r\nたとえば、こんな感じに書くこともできます。\r\n\r\n■■■■■コラム小見出し2\r\n...\r\n◆/column◆\r\n```\r\n\r\nこの例では、全体を「◆column/◆」と「◆/column◆」で囲まれた中に、さらに段落タグが設定されていることに注意してください。\r\n\r\nこうした記述が可能であることは便利ではありますが、一方で、終了記号が記述されていないと見なされた場合、デフォルトの段落スタイルに戻らなくなる、という事態になることがあります。\r\n\r\n#### 開始記号が見つからず、終了記号だけが認識された場合\r\n\r\n終了記号だけが認識された場合、プログラムはエラーを起こしてしまいます。\r\n\r\nこの問題は、しばしば一行段落タグとの関係で起こることがあります。次のような設定を行って、同じ編集記号で、一行段落タグと開始記号とを兼ねようとした場合がそれに当たります。\r\n\r\n```\r\n◆箇条◆           : 箇条書き\r\n◆箇条◆ ◆/箇条◆ : 箇条書き\r\n```\r\n\r\nこのとき、プログラムは一行段落タグのほうを優先して認識しますから（これは、先に記述してあるほうが優先されるからです）、開始記号はけっして認識されません。ですから、これに基づいて原稿ファイルを作成してしまうと、終了記号だけが認識されてエラーになる、という事態が発生します。\r\n\r\n次のように設定するなどして、同じ編集記号を使用しないようにしましょう。\r\n\r\n```\r\n◆箇条◆            : 箇条書き\r\n◆箇条/◆ ◆/箇条◆ : 箇条書き\r\n```\r\n\r\n## 文字タグ設定\r\n\r\n文字タグの設定を列挙します。文字タグとは、文字スタイルに変換される編集記号のことです。\r\n\r\n文字タグは、必ず開始記号と終了記号を持ちます。原稿ファイル内で、たとえば次のように利用する記号です。\r\n\r\n```\r\n原稿ファイルでの使用例：\r\nではさっそく◆b/◆idtagreplacer◆/b◆を使ってみましょう。\r\n```\r\n\r\n### 設定ファイルに記述する書式\r\n\r\n文字タグの設定は段落タグに準じます。段落タグ同様、設定は行単位で解釈されます。\r\n\r\n書式は次の通りです。\r\n\r\n```\r\n開始記号 終了記号 : スタイル名\r\n```\r\n\r\n開始記号と終了記号の間の空白文字（スペースやタブ）は、いくつあってもかまいません。\r\n\r\n記号やスタイル名と「:」の間にある空白は、あってもなくてもかまいません。また空白を入れた場合、それはいくつ入っていてもかまいません。\r\n\r\n### オプション\r\n\r\nスタイル名の先頭に「!!」を付けると、スタイル名と同じプロパティ名に記述されたJavaScriptを実行させることができます。\r\n\r\nなお、文字タグの編集記号は、idtagreplacerが変換処理を行う際に削除されます。段落タグと異なり、文字タグの場合は、スタイル名の先頭に「!」を付けて編集記号を残すことはできません。\r\n\r\n## 自由置換設定\r\n\r\n自動的に置換したい文字列を列挙します。換言すれば、これは終了記号のない文字タグのようなものとも言えます。\r\n\r\n書式は次の通りです。\r\n\r\n```\r\n置換前の文字列 : 置換後の文字列\r\n```\r\n\r\nたとえば、\r\n\r\n```\r\nインターフェース : インタフェース\r\n```\r\n\r\nと設定しておけば、原稿ファイル中に出てくる「インターフェース」はすべて「インタフェース」に変換されます。この例は単純な文字列置換でしたが、置換後の文字列には\r\nInDesignタグを直接書くこともできますので、\r\n\r\n```\r\n●→● : <27A1>\r\n```\r\n\r\nのように、終了記号のない文字タグのような感覚で使うこともできます。\r\n\r\n### Unicodeの特殊な文字の設定\r\n\r\n先の例は、Unicodeの[右矢印](http://www.charbase.com/27a1-unicode-black-rightwards-arrow)になります。このようにキーボードから入力しにくい特殊な文字を設定したい場合は、先と同様に次の書式で記述します。\r\n\r\n```\r\n編集記号 : <Unicodeの4桁の値>\r\n```\r\n\r\n## 黒丸数字書式\r\n\r\nここでは、JavaScriptによって自由置換設定を追加しています。\r\n\r\n「黒丸数字書式」以外にも、「白丸数字書式」や「黒四角数字書式」「アルファベット」がありますが、これらは設定ファイルを読み込む際に、プログラムから固定的に呼び出されます。このプロパティ名は変更できませんが、もし必要なければ、プロパティそのものを削除しても問題はないはずです。\r\n\r\nこれらの一連のJavaScriptは、一定のパターンで作成されています。\r\n\r\n```\r\nformat = \"%d●\";\r\ncode = 0x2776 - 1;\r\nfor (var i = 10; i >= 1; i--)\r\n  App.replaceSigns.add(new ReplaceSign(format.replace('%d', i),\r\n    new ReplaceTag('<' + (code + i).toString(16) + '>')));\r\n```\r\n\r\n1行目のformatには、黒丸数字に変換したい書式が来ます。「%d」の部分に数字が入ります。\r\n\r\n2行目の「0x2776」はコードポイントです。この例は黒丸数字ですから、黒丸数字の1に当たるUnicodeの値をここに書き込みます。Unicodeは一般的に16進数で書き表しますので、プログラムでも0xを付けて16進数で表現しています。\r\n\r\n3行目の「10」は作成する上限値です。この場合10になっていますから、1から10までの黒丸数字の設定が作成されることになります。\r\n\r\n## 白丸数字書式\r\n\r\n「黒丸数字書式」と同様です。\r\n\r\nここには、自由置換設定に白丸数字の設定を追加するJavaScriptが書かれています。設定ファイルを読み込む際に、自動的に実行されます。\r\n\r\nプロパティ名を変更すると実行されなくなりますが、このプロパティ自体を削除しても問題はないはずです。\r\n\r\n## 黒四角数字書式\r\n\r\nこれも「黒丸数字書式」と同様です。\r\n\r\nここには、自由置換設定に黒四角数字の設定を追加するJavaScriptが書かれています。設定ファイルを読み込む際に、自動的に実行されます。\r\n\r\nプロパティ名を変更すると実行されなくなりますが、このプロパティ自体を削除しても問題はないはずです。\r\n\r\n## アルファベット\r\n\r\nこれも「黒丸数字書式」とほぼ同様です。\r\n\r\nここには、キーボードのキートップのような字形を持つアルファベットの設定を、自由置換設定に追加するJavaScriptが書かれています。設定ファイルを読み込む際に、自動的に実行されます。\r\n\r\nプロパティ名を変更すると実行されなくなりますが、このプロパティ自体を削除しても問題はないはずです。\r\n\r\n以上で、プロパティの説明は終了です。\r\n\r\n## tagconf.xml記述の注意点 ── idtagreplacerの変換処理の順序\r\n\r\nidtagreplacerは、次のような順序でタグ変換を行います。\r\n\r\n1. 「<」「>」を見付けたら、その前に「<005C>」を追加する\r\n2. 段落タグの変換を行う\r\n3. 文字タグの変換を行う\r\n4. 自由置換の変換を行う\r\n\r\n注意すべき点は、最初に実行される「<」「>」に対する特殊な変換処理です。\r\n\r\nこの変換は自由置換や文字タグ変換の前に実行されますので、たとえば自由置換設定や文字タグ、段落タグ設定で「<」や「>」を含む文字列にヒットさせたい場合、単純に「<」や「>」を設定ファイルに記述してしまうと、実行結果が不正になる場合があります。なぜなら、自由置換や文字タグ、段落タグの評価が行われる時点には、すでに「<」や「>」の前に「<005C>」が挿入されているからです。設定ファイルには明示的に「<005C>」を付けて記述する必要があります（※）。\r\n\r\n※設定ファイルに記述しなくても、プログラムが自動的に設定情報に「<005C>」を付け足すという方法もありますが、いずれにしても動作が不規則であることは免れませんので、そのような実装にはなっていません。その代わり、一度自由置換で変換したInDesignタグを、さらに文字タグや段落タグとして変換する、というような場合には、比較的自然に記述できるようになっています。\r\n\r\n# InDesignタグ\r\n\r\n## 仕様\r\n\r\nAdobeのユーザーガイドにまとまっています。\r\n\r\nhttp://help.adobe.com/ja_JP/indesign/cs/taggedtext/indesign_cs5_taggedtext.pdf\r\n\r\n## InDesignタグの洗い出し方\r\n\r\nどのようなInDesignタグを書けばよいかを洗い出すには、仕上がりをInDesign上で作成し、それをInDesignタグに書き出すのが手っとり早いです。\r\n\r\n書き出し方は次の通りです。\r\n\r\n1. [ファイル]→[書き出し]\r\n2. [InDesignタグ付きテキスト]を選択\r\n3. [保存]\r\n4. [略書き]、エンコーディング[Shift-Jis]\r\n5. [保存]\r\n6. そのInDesign上で設定されているタグが全部書かれたテキストができる\r\n7. 当てはまる部分をtagconf.xmlに記述\r\n8. ちゃんと変換されるかタグ付テキストを作成してInDesignに流し込む\r\n\r\nUnicodeの値を洗い出すときにも使えますが、これはググったほうが早い気がします\r\n\r\n# JavaScript関係の資料\r\n\r\n## プログラム固有のオブジェクト\r\n\r\n通常のJavaScriptのオブジェクト以外に、Javaの標準APIやプログラム固有のオブジェクトを使うことができます。プログラム固有のオブジェクトには、以下のものがあります。\r\n\r\n### Appオブジェクト\r\n\r\nAppには中心となるオブジェクトがまとめられています。次のものがあります。\r\n\r\n#### App.activeParagraphTag\r\n\r\n現在の段落タグが何であるのかを保持するオブジェクトです。実体はJavaのLinkedListで、ここにはParagraphTagというオブジェクトが集められています。\r\n\r\n#### App.characterSigns\r\n\r\n設定ファイルから読み込んだ文字タグの全設定情報を配列化（リスト化）したものです。実体はJavaの LinkedListで、ここにはCharacterSignというオブジェクトが集められています。\r\n\r\n#### App.paragraphSigns\r\n\r\n設定ファイルから読み込んだ段落タグの全設定情報を配列化（リスト化）したものです。実体はJavaのLinkedListで、ここにはParagraphSignというオブジェクトが集められています。\r\n\r\n#### App.replaceSigns\r\n\r\n設定ファイルから読み込んだ自由置換設定の全内容を配列化（リスト化）したものです。実体はJavaのLinkedListで、ここにはReplaceSignというオブジェクトが集められています。\r\n\r\n#### App.printController\r\n\r\n出力時の操作を管理するオブジェクトです。addCommandメソッドを使って、行うべき操作やその順序を指示します。と言っても、指示できるコマンドは「print」と「remove last para」、その他（何もしない）の3種類だけです。\r\n\r\n「print」コマンドは出力を指示できます。「remove last para」は、段落タグの切り替えを指示できます。ただし実際にこれが実行されるのは、addCommandメソッドを呼び出したタイミングではなく、現在処理している行の変換処理がすべて完了したタイミングです。\r\n\r\n#### App.out\r\n\r\n出力を担当するオブジェクトです。これはアプリケーション固有のオブジェクトで、次のようなメソッドを持っています。\r\n\r\n1. print(str)\r\n * 引数で渡された文字列を出力ファイルに出力します。プログラムはこのとき改行コードを加えませんし、行が続いているものと見なして動作します。\r\n2. println(str)\r\n * 引数で渡された文字列に改行コードを加えて、出力ファイルに出力します。プログラムは、行が終了したことを認識し、必要な段落タグの切り替え処理などを行います。\r\n3. getLineFeedCode()\r\n * 設定ファイルに設定された改行コードを返します。返すのは設定値そのままではなく、対応する制御文字のほうです。つまり、たとえば設定値が\r\n * CR であったら、アスキーコード13の改行の制御文字が返されます。\r\n\r\n### 自由置換設定オブジェクト\r\n\r\nApp以外にも、場所によって個別に利用できるオブジェクトがあります。以下、それを列挙していきます。\r\n\r\nまず、「黒丸数字書式」「白丸数字書式」「黒四角数字書式」「アルファベット」など、自由置換設定を行うスクリプトで利用できるオブジェクトです。\r\n\r\n#### ReplaceSign\r\n\r\n自由置換設定の情報を1つ格納するためのオブジェクトです。自由置換設定をJavaScriptで追加したい場合に利用します。\r\n\r\n#### ReplaceTag\r\n\r\n自由置換設定の置換後の情報を1つ格納するためのオブジェクトです。自由置換設定をJavaScriptで追加したい場合に利用します。\r\n\r\n### 文字タグ・段落タグ共通オブジェクト\r\n\r\n次に、文字タグや段落タグから呼び出された場合に利用できるオブジェクトです。\r\n\r\n#### startSign\r\n\r\n開始記号の文字列です。実体はJavaのStringです。\r\n\r\n#### endSign\r\n\r\n終了記号の文字列です。実体はJavaのStringです。一行段落タグの場合は、undefinedになります。\r\n\r\n#### targetLine\r\n\r\n現在の処理対象の行の文字列です。実体はJavaのStringです。この文字列の内容は、原稿ファイルの内容そのままではなく、すでにある程度変換処理がなされたものになっています。\r\n\r\n### tagName\r\n\r\nスタイル名です。実体はJavaの Stringです。段落タグの場合は、先頭の「!!」が取り除かれています。\r\n\r\n### 文字タグオブジェクト\r\n\r\n続いて、文字タグから呼び出された場合に利用できるオブジェクト（関数）です。これは、段落タグからでは呼び出せません。\r\n\r\n#### searchTag()\r\n\r\n引数に関数を取ります。\r\n\r\nsearchTagは、現在の処理対象の行から文字タグを見付け、処理対象の行を次の3つの部分に分割します。\r\n\r\n1. 行の先頭から開始タグの前まで\r\n2. 開始タグの後ろから終了タグの前まで\r\n3. 終了タグの後ろから行末まで\r\n\r\nこのそれぞれには、タグ自体の文字列は含まれません。\r\n\r\nこれらの分割した文字列が、引数として渡された関数の引数になります。引数側の関数は、変換結果の文字列を返さなければなりません。\r\n\r\nsearchTagは、現在の処理対象の行から、文字タグが見付からなくなるまで繰り返し呼ばれます。\r\n\r\nsearchTagは、おおよそ次のような書式で実装できます。\r\n\r\n```\r\nsearchTag(function(left, middle, right) {\r\n  var result = ...;  // 変換処理を記述\r\n  return result;     // 変換結果を返す\r\n});\r\n\r\n```\r\n\r\n### 段落タグオブジェクト\r\n\r\n最後に、段落タグから呼び出された場合に利用できるオブジェクトです。これは文字タグからでは呼び出せません。\r\n\r\n#### ParagraphTag\r\n\r\n段落スタイルを格納するためのオブジェクトです。一時的に段落スタイルを適用したい場合などに使います。\r\n\r\n## 段落タグで実装する関数\r\n\r\n段落タグから呼び出されるJavaScriptでは、次の関数を実装しなければなりません。\r\n\r\n### whenStartSignMuches()\r\n\r\nこの関数に、開始タグが見つかったときの処理を記述します。出力したい文字列がある場合は、その文字列をreturnしなければなりません。\r\n\r\n### whenEndSignMuches()\r\n\r\nこの関数に、終了タグが見つかったときの処理を記述します。whenStartSignMuches同様、出力したい文字列がある場合は、その文字列をreturnしなければなりません。終了タグがない場合は記述しなくてもかまいません。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}